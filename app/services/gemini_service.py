import os
from dotenv import load_dotenv
load_dotenv()
import google.generativeai as genai
from google.generativeai.types import GenerationConfig, Tool
import json

# --- Gemini API Configuration ---
api_key = os.getenv('GEMINI_API_KEY') or os.getenv('GOOGLE_API_KEY')
if not api_key:
    raise ValueError("GEMINI_API_KEY or GOOGLE_API_KEY not found in environment variables")

genai.configure(api_key=api_key)
print(f"üîë Gemini API key configured successfully")

# Get model name from environment
MODEL_NAME = os.getenv('GEMINI_MODEL_NAME', 'gemini-1.5-flash-latest')
print(f"ü§ñ Using Gemini model: {MODEL_NAME}")

# --- Tool Definition for Function Calling ---
MANAGE_HOOKS_TOOL = Tool(
    function_declarations=[
        {
            "name": "manage_user_memory_hooks",
            "description": "–î–æ–±–∞–≤–ª—è–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–∫—Ç—ã (—Ö—É–∫–∏) –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–∏—à–∏ –ø–æ–∫–æ—Ä–æ—á–µ', '–º–æ–∂–Ω–æ –Ω–∞ —Ç—ã', '–æ—Ç–≤–µ—á–∞–π —Å—É—Ö–æ'), –∑–∞–ø–æ–º–∏–Ω–∞–π —ç—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—É–∫. –ò–∑–≤–ª–µ–∫–∞–π –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, –Ω–æ –∏ —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–º–µ–Ω—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ç –ø–µ—Ä–µ–µ—Ö–∞–ª –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º', '—è –Ω–∞—á–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è HTML', '—è —Å—Ç–∞–ª —á–∞—â–µ –≥—É–ª—è—Ç—å'). –î–∞–∂–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤, —Å—Ç–∞—Ä–∞–π—Å—è –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —É–≤–ª–µ—á–µ–Ω–∏–π, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã Linux ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–µ –∫ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –∏ Linux).",
            "parameters": {
                "type": "OBJECT",
                "properties": {
                    "hooks_to_add": {
                        "type": "ARRAY",
                        "items": {"type": "STRING"},
                        "description": "–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å. –í–∫–ª—é—á–∞–π —Å—é–¥–∞ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è, –∏ –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–º–µ–Ω—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —É–≤–ª–µ—á–µ–Ω–∏–π, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."
                    },
                    "hooks_to_update": {
                        "type": "ARRAY",
                        "items": {
                            "type": "OBJECT",
                            "properties": {
                                "old_hook_text": {"type": "STRING"},
                                "new_hook_text": {"type": "STRING"}
                            },
                            "required": ["old_hook_text", "new_hook_text"]
                        },
                        "description": "–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –£–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç."
                    },
                    "hooks_to_delete": {
                        "type": "ARRAY",
                        "items": {"type": "STRING"},
                        "description": "–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –∏—Ö –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
                    }
                }
            }
        }
    ]
)

# --- Gemini Model Initialization ---
model = genai.GenerativeModel(
    model_name=MODEL_NAME,
    tools=[MANAGE_HOOKS_TOOL]
)

# --- Main Analysis Function ---
async def analyze_and_manage_hooks(message_text: str, existing_hooks: list[str]):
    """
    Analyzes user message and decides whether to call the memory management function.
    """
    system_prompt = (
        "–¢—ã ‚Äî —è–¥—Ä–æ –ø–∞–º—è—Ç–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ "
        "—Ñ–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å –æ –Ω—ë–º (`existing_hooks`). –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—à–∞–π, –Ω—É–∂–Ω–æ –ª–∏ "
        "–¥–æ–±–∞–≤–∏—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ñ–∞–∫—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–º. "
        "–í—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é `manage_user_memory_hooks` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. "
        "–ù–µ –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, –æ–±—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "
        "–Ω–æ–≤–æ–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∏–ª–∏ –Ω–µ—è–≤–Ω–æ –≤—ã—Ä–∞–∂–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–∏—à–∏ –ø–æ–∫–æ—Ä–æ—á–µ', '–º–æ–∂–Ω–æ –Ω–∞ —Ç—ã', '–æ—Ç–≤–µ—á–∞–π —Å—É—Ö–æ'), –∑–∞–ø–æ–º–∏–Ω–∞–π —ç—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—É–∫. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö, –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è—Ö, –Ω–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, —ç–º–æ—Ü–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ç –ø–µ—Ä–µ–µ—Ö–∞–ª –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º', '—è –Ω–∞—á–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è HTML', '—è —Å—Ç–∞–ª —á–∞—â–µ –≥—É–ª—è—Ç—å'), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π —ç—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—É–∫. "
        "–î–∞–∂–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤, —Å—Ç–∞—Ä–∞–π—Å—è –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —É–≤–ª–µ—á–µ–Ω–∏–π, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã Linux ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–µ –∫ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –∏ Linux). "
        "–ü—Ä–∏–º–µ—Ä: –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è '–ö–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å –∫–æ—Ä–º –¥–ª—è —Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞ 1.5 –≥–æ–¥–∞?' –∏–∑–≤–ª–µ–∫–∏ —Ç—Ä–∏ —Ñ–∞–∫—Ç–∞: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ—Ç', '–ö–æ—Ç —Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω', '–ö–æ—Ç—É 1.5 –≥–æ–¥–∞'."
        f"–í–æ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {existing_hooks}"
    )
    print("\n===== [Gemini Memory Function Calling] =====")
    print(f"[PROMPT]:\n{system_prompt}\n\n[USER]: {message_text}")
    try:
        response = await model.generate_content_async(
            system_prompt + "\n\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + message_text,
            generation_config=GenerationConfig(temperature=0.1)
        )
        print("[RAW RESPONSE]:\n" + json.dumps(response.to_dict() if hasattr(response, 'to_dict') else str(response), ensure_ascii=False, indent=2))
        if response.candidates and response.candidates[0].content.parts:
            part = response.candidates[0].content.parts[0]
            if hasattr(part, 'function_call') and part.function_call:
                print(f"[FOUND FUNCTION CALL]: {part.function_call}")
                return part.function_call
        print("[NO FUNCTION CALL FOUND]")
    except Exception as e:
        print(f"‚ùå Error during Gemini API call: {e}")
        return None
    
    return None

# --- Gemini Assistant Reply Function ---
async def generate_assistant_reply(message_text: str, existing_hooks: list[str]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    system_prompt = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ—Ç —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: "
        f"{existing_hooks if existing_hooks else '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ.'} "
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ñ–∞–∫—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. "
        "–ï—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –∏—Ö. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é, –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. "
        "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å ‚Äî —Ç–≤–æ–π —Å—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
    )
    print("\n===== [Gemini Assistant Reply] =====")
    print(f"[PROMPT]:\n{system_prompt}\n\n[USER]: {message_text}")
    try:
        response = await model.generate_content_async(
            system_prompt + "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + message_text,
            generation_config=GenerationConfig(temperature=0.7)
        )
        print("[RAW RESPONSE]:\n" + json.dumps(response.to_dict() if hasattr(response, 'to_dict') else str(response), ensure_ascii=False, indent=2))
        # 1. –ü—Ä–æ–±—É–µ–º response.text
        if hasattr(response, "text") and response.text:
            print(f"[FOUND TEXT]: {response.text.strip()}")
            return response.text.strip()
        # 2. –ü—Ä–æ–±—É–µ–º candidates[0].content.parts
        if hasattr(response, "candidates") and response.candidates:
            parts = getattr(response.candidates[0].content, "parts", None)
            if parts:
                for part in parts:
                    if hasattr(part, "text") and part.text:
                        print(f"[FOUND PART TEXT]: {part.text.strip()}")
                        return part.text.strip()
        # 3. –ï—Å–ª–∏ –µ—Å—Ç—å function_call, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ tools
        if hasattr(response, "candidates") and response.candidates:
            parts = getattr(response.candidates[0].content, "parts", None)
            if parts:
                for part in parts:
                    if hasattr(part, "function_call") and part.function_call:
                        print("[ONLY FUNCTION CALL FOUND, RETRYING WITHOUT TOOLS]")
                        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ tools
                        model_no_tools = genai.GenerativeModel(
                            model_name=MODEL_NAME,
                            tools=[]
                        )
                        response2 = await model_no_tools.generate_content_async(
                            system_prompt + "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + message_text,
                            generation_config=GenerationConfig(temperature=0.7)
                        )
                        print("[RAW RESPONSE 2]:\n" + json.dumps(response2.to_dict() if hasattr(response2, 'to_dict') else str(response2), ensure_ascii=False, indent=2))
                        if hasattr(response2, "text") and response2.text:
                            print(f"[FOUND TEXT 2]: {response2.text.strip()}")
                            return response2.text.strip()
                        if hasattr(response2, "candidates") and response2.candidates:
                            parts2 = getattr(response2.candidates[0].content, "parts", None)
                            if parts2:
                                for part2 in parts2:
                                    if hasattr(part2, "text") and part2.text:
                                        print(f"[FOUND PART TEXT 2]: {part2.text.strip()}")
                                        return part2.text.strip()
        print("[NO TEXT FOUND]")
        return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.]"
    except Exception as e:
        print(f"‚ùå Error during Gemini assistant reply: {e}")
        return "[–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.]" 